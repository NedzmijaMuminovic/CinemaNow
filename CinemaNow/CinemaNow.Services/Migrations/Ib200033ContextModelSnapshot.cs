// <auto-generated />
using System;
using CinemaNow.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CinemaNow.Services.Migrations
{
    [DbContext(typeof(Ib200033Context))]
    partial class Ib200033ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CinemaNow.Services.Database.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ImageThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Actor__3214EC27F4EBCAE2");

                    b.ToTable("Actor", (string)null);
                });

            modelBuilder.Entity("CinemaNow.Services.Database.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Genre__3214EC2786854726");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("CinemaNow.Services.Database.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ImageThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Movie__3214EC277413BFFF");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("CinemaNow.Services.Database.PayPalPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Info")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PK__PayPalPa__3214EC276A200272");

                    b.HasIndex("UserId");

                    b.ToTable("PayPalPayment", (string)null);
                });

            modelBuilder.Entity("CinemaNow.Services.Database.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("NumberOfTickets")
                        .HasColumnType("int");

                    b.Property<int?>("PayPalPaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PayPalPaymentID");

                    b.Property<int?>("ScreeningId")
                        .HasColumnType("int")
                        .HasColumnName("ScreeningID");

                    b.Property<int?>("SeatId")
                        .HasColumnType("int")
                        .HasColumnName("SeatID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PK__Purchase__3214EC27E3E4EDB5");

                    b.HasIndex("PayPalPaymentId");

                    b.HasIndex("ScreeningId");

                    b.HasIndex("SeatId");

                    b.HasIndex("UserId");

                    b.ToTable("Purchase", (string)null);
                });

            modelBuilder.Entity("CinemaNow.Services.Database.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Rating__3214EC2764658F9A");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("CinemaNow.Services.Database.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("NumberOfTickets")
                        .HasColumnType("int");

                    b.Property<int?>("ScreeningId")
                        .HasColumnType("int")
                        .HasColumnName("ScreeningID");

                    b.Property<int?>("SeatId")
                        .HasColumnType("int")
                        .HasColumnName("SeatID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PK__Reservat__3214EC271299548E");

                    b.HasIndex("ScreeningId");

                    b.HasIndex("SeatId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("CinemaNow.Services.Database.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Role__3214EC27FD681978");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("CinemaNow.Services.Database.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Hall")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("StateMachine")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id")
                        .HasName("PK__Screenin__3214EC27A540ED58");

                    b.HasIndex("MovieId");

                    b.ToTable("Screening", (string)null);
                });

            modelBuilder.Entity("CinemaNow.Services.Database.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("ScreeningId")
                        .HasColumnType("int")
                        .HasColumnName("ScreeningID");

                    b.HasKey("Id")
                        .HasName("PK__Seat__3214EC276828327D");

                    b.HasIndex("ScreeningId");

                    b.ToTable("Seat", (string)null);
                });

            modelBuilder.Entity("CinemaNow.Services.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ImageThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__User__3214EC277C797F01");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("MovieActor", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<int>("ActorId")
                        .HasColumnType("int")
                        .HasColumnName("ActorID");

                    b.HasKey("MovieId", "ActorId")
                        .HasName("PK__MovieAct__EEA9AA98EF0F8CF7");

                    b.HasIndex("ActorId");

                    b.ToTable("MovieActor", (string)null);
                });

            modelBuilder.Entity("MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    b.HasKey("MovieId", "GenreId")
                        .HasName("PK__MovieGen__BBEAC46F651A80DC");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenre", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__UserRole__AF27604F5801D74A");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("CinemaNow.Services.Database.PayPalPayment", b =>
                {
                    b.HasOne("CinemaNow.Services.Database.User", "User")
                        .WithMany("PayPalPayments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__PayPalPay__UserI__3C69FB99");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CinemaNow.Services.Database.Purchase", b =>
                {
                    b.HasOne("CinemaNow.Services.Database.PayPalPayment", "PayPalPayment")
                        .WithMany("Purchases")
                        .HasForeignKey("PayPalPaymentId")
                        .HasConstraintName("FK__Purchase__PayPal__48CFD27E");

                    b.HasOne("CinemaNow.Services.Database.Screening", "Screening")
                        .WithMany("Purchases")
                        .HasForeignKey("ScreeningId")
                        .HasConstraintName("FK__Purchase__Screen__47DBAE45");

                    b.HasOne("CinemaNow.Services.Database.Seat", "Seat")
                        .WithMany("Purchases")
                        .HasForeignKey("SeatId")
                        .HasConstraintName("FK__Purchase__SeatID__49C3F6B7");

                    b.HasOne("CinemaNow.Services.Database.User", "User")
                        .WithMany("Purchases")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Purchase__UserID__46E78A0C");

                    b.Navigation("PayPalPayment");

                    b.Navigation("Screening");

                    b.Navigation("Seat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CinemaNow.Services.Database.Rating", b =>
                {
                    b.HasOne("CinemaNow.Services.Database.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__Rating__MovieID__4D94879B");

                    b.HasOne("CinemaNow.Services.Database.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Rating__UserID__4CA06362");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CinemaNow.Services.Database.Reservation", b =>
                {
                    b.HasOne("CinemaNow.Services.Database.Screening", "Screening")
                        .WithMany("Reservations")
                        .HasForeignKey("ScreeningId")
                        .HasConstraintName("FK__Reservati__Scree__4316F928");

                    b.HasOne("CinemaNow.Services.Database.Seat", "Seat")
                        .WithMany("Reservations")
                        .HasForeignKey("SeatId")
                        .HasConstraintName("FK__Reservati__SeatI__440B1D61");

                    b.HasOne("CinemaNow.Services.Database.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Reservati__UserI__4222D4EF");

                    b.Navigation("Screening");

                    b.Navigation("Seat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CinemaNow.Services.Database.Screening", b =>
                {
                    b.HasOne("CinemaNow.Services.Database.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__Screening__Movie__398D8EEE");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CinemaNow.Services.Database.Seat", b =>
                {
                    b.HasOne("CinemaNow.Services.Database.Screening", "Screening")
                        .WithMany("Seats")
                        .HasForeignKey("ScreeningId")
                        .HasConstraintName("FK__Seat__ScreeningI__3F466844");

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("MovieActor", b =>
                {
                    b.HasOne("CinemaNow.Services.Database.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .IsRequired()
                        .HasConstraintName("FK__MovieActo__Actor__36B12243");

                    b.HasOne("CinemaNow.Services.Database.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__MovieActo__Movie__35BCFE0A");
                });

            modelBuilder.Entity("MovieGenre", b =>
                {
                    b.HasOne("CinemaNow.Services.Database.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK__MovieGenr__Genre__30F848ED");

                    b.HasOne("CinemaNow.Services.Database.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__MovieGenr__Movie__300424B4");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("CinemaNow.Services.Database.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRole__RoleID__29572725");

                    b.HasOne("CinemaNow.Services.Database.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRole__UserID__286302EC");
                });

            modelBuilder.Entity("CinemaNow.Services.Database.Movie", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("CinemaNow.Services.Database.PayPalPayment", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("CinemaNow.Services.Database.Screening", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("Reservations");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("CinemaNow.Services.Database.Seat", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("CinemaNow.Services.Database.User", b =>
                {
                    b.Navigation("PayPalPayments");

                    b.Navigation("Purchases");

                    b.Navigation("Ratings");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
